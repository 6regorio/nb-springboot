/*
 * Copyright 2016 Alessandro Falappa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.alexfalappa.nbspringboot.projects.customizer;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Comparator;
import java.util.TreeSet;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.html.HTMLEditorKit;

import org.springframework.boot.configurationprocessor.metadata.ItemMetadata;

import com.github.alexfalappa.nbspringboot.Utils;
import com.github.alexfalappa.nbspringboot.projects.service.api.SpringBootService;

import static java.awt.event.MouseEvent.BUTTON1;

/**
 * Dialog for choosing one Spring Boot configuration property in an ordered list of those available in the project.
 * <p>
 * Queries a {@link SpringBootService} for the configuration properties names.
 *
 * @author Alessandro Falappa
 */
public class CfgPropsDialog extends javax.swing.JDialog {

    private boolean okPressed = false;

    /** Creates new form CfgPropsDialog */
    public CfgPropsDialog(java.awt.Dialog parent) {
        super(parent, true);
        initComponents();
        lCfgProps.setCellRenderer(new ItemMetadataCellRenderer());
        lCfgProps.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    tpDetails.setText(Utils.cfgPropDetailsHtml(lCfgProps.getSelectedValue()));
                    tpDetails.setCaretPosition(0);
                }
            }
        });
        // set default button
        rootPane.setDefaultButton(bOk);
        // close dialog with ESC key
        final ActionListener escAction = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                CfgPropsDialog.this.setVisible(false);
            }
        };
        rootPane.registerKeyboardAction(escAction, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
    }

    public void loadCfgProps(SpringBootService bootService) {
        DefaultListModel<ItemMetadata> dlmCfgProps = new DefaultListModel<>();
        if (bootService != null) {
            TreeSet<ItemMetadata> sorted = new TreeSet<>(new ItemMetadataNameComparator());
            sorted.addAll(bootService.queryPropertyMetadata(null));
            for (ItemMetadata item : sorted) {
                dlmCfgProps.addElement(item);
            }
        }
        lCfgProps.setModel(dlmCfgProps);
        if (!dlmCfgProps.isEmpty()) {
            lCfgProps.setSelectedIndex(0);
        }
        pack();
    }

    boolean okPressed() {
        return okPressed;
    }

    String getSelectedPropName() {
        return lCfgProps.getSelectedValue().getName();
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bCancel = new javax.swing.JButton();
        bOk = new javax.swing.JButton();
        splitter = new javax.swing.JSplitPane();
        scroller1 = new javax.swing.JScrollPane();
        lCfgProps = new javax.swing.JList<>();
        scroller2 = new javax.swing.JScrollPane();
        tpDetails = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getBundle(CfgPropsDialog.class).getString("CfgPropsDialog.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bCancel, org.openide.util.NbBundle.getBundle(CfgPropsDialog.class).getString("CfgPropsDialog.bCancel.text")); // NOI18N
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bOk, org.openide.util.NbBundle.getBundle(CfgPropsDialog.class).getString("CfgPropsDialog.bOk.text")); // NOI18N
        bOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOkActionPerformed(evt);
            }
        });

        splitter.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitter.setContinuousLayout(true);

        lCfgProps.setVisibleRowCount(16);
        lCfgProps.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lCfgPropsMouseClicked(evt);
            }
        });
        scroller1.setViewportView(lCfgProps);

        splitter.setTopComponent(scroller1);

        tpDetails.setEditorKit(new HTMLEditorKit());
        tpDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tpDetails.setMinimumSize(new java.awt.Dimension(42, 63));
        tpDetails.setPreferredSize(new java.awt.Dimension(42, 63));
        scroller2.setViewportView(tpDetails);

        splitter.setRightComponent(scroller2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(splitter)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bOk)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bCancel, bOk});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitter)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bOk)
                    .addComponent(bCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOkActionPerformed
        okPressed = true;
        bCancelActionPerformed(null);
    }//GEN-LAST:event_bOkActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_bCancelActionPerformed

    private void lCfgPropsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lCfgPropsMouseClicked
        if (evt.getButton() == BUTTON1 && evt.getClickCount() > 1) {
            bOkActionPerformed(null);
        }
    }//GEN-LAST:event_lCfgPropsMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bOk;
    private javax.swing.JList<ItemMetadata> lCfgProps;
    private javax.swing.JScrollPane scroller1;
    private javax.swing.JScrollPane scroller2;
    private javax.swing.JSplitPane splitter;
    private javax.swing.JTextPane tpDetails;
    // End of variables declaration//GEN-END:variables

    private static class ItemMetadataCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value instanceof ItemMetadata) {
                ItemMetadata item = (ItemMetadata) value;
                setText(item.getName());
            }
            return this;
        }

    }

    private static class ItemMetadataNameComparator implements Comparator<ItemMetadata> {

        @Override
        public int compare(ItemMetadata o1, ItemMetadata o2) {
            return o1.getName().compareTo(o2.getName());
        }

    }
}
