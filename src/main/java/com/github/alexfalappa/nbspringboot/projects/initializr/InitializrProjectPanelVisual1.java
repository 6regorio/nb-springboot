/*
 * Copyright 2016 sasha.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.alexfalappa.nbspringboot.projects.initializr;

import java.util.Objects;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;

import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;

import com.fasterxml.jackson.databind.JsonNode;

import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_ARTIFACT;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_DESCRIPTION;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_GROUP;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_JAVA_VERSION;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_LANGUAGE;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_METADATA;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_NAME;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_PACKAGE;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_PACKAGING;
import static com.github.alexfalappa.nbspringboot.projects.initializr.InitializrProjectProps.WIZ_VERSION;

public class InitializrProjectPanelVisual1 extends JPanel {

    public static final String PROP_PROJECT_NAME = "projectName";
    private final DefaultComboBoxModel<CboxItem> dcbmBootVersion = new DefaultComboBoxModel<>();
    private final DefaultComboBoxModel<CboxItem> dcbmLanguage = new DefaultComboBoxModel<>();
    private final DefaultComboBoxModel<CboxItem> dcbmJavaVersion = new DefaultComboBoxModel<>();
    private final DefaultComboBoxModel<CboxItem> dcbmPackaging = new DefaultComboBoxModel<>();

    private final InitializrProjectWizardPanel1 panel;

    public InitializrProjectPanelVisual1(InitializrProjectWizardPanel1 panel) {
        initComponents();
        this.panel = panel;
    }

    public String getProjectName() {
        return this.txGroup.getText();
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lGroup = new javax.swing.JLabel();
        lArtifact = new javax.swing.JLabel();
        lName = new javax.swing.JLabel();
        lDesc = new javax.swing.JLabel();
        lPackage = new javax.swing.JLabel();
        lPackaging = new javax.swing.JLabel();
        lJavaVersion = new javax.swing.JLabel();
        lLanguage = new javax.swing.JLabel();
        txGroup = new javax.swing.JTextField();
        txArtifact = new javax.swing.JTextField();
        txName = new javax.swing.JTextField();
        txDesc = new javax.swing.JTextField();
        txPackage = new javax.swing.JTextField();
        cbPackaging = new javax.swing.JComboBox<>();
        cbJavaVersion = new javax.swing.JComboBox<>();
        cbLanguage = new javax.swing.JComboBox<>();
        lVersion = new javax.swing.JLabel();
        txVersion = new javax.swing.JTextField();
        lBootVersion = new javax.swing.JLabel();
        cbBootVersion = new javax.swing.JComboBox<>();

        lGroup.setLabelFor(txGroup);
        org.openide.awt.Mnemonics.setLocalizedText(lGroup, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lGroup.text")); // NOI18N

        lArtifact.setLabelFor(txArtifact);
        org.openide.awt.Mnemonics.setLocalizedText(lArtifact, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lArtifact.text")); // NOI18N

        lName.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lName, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lName.text")); // NOI18N

        lDesc.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lDesc, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lDesc.text")); // NOI18N

        lPackage.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lPackage, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lPackage.text")); // NOI18N

        lPackaging.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lPackaging, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lPackaging.text")); // NOI18N

        lJavaVersion.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lJavaVersion, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lJavaVersion.text")); // NOI18N

        lLanguage.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lLanguage, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lLanguage.text")); // NOI18N

        txGroup.setColumns(20);

        txArtifact.setColumns(20);

        txName.setColumns(20);

        txDesc.setColumns(20);

        txPackage.setColumns(20);

        lVersion.setLabelFor(txName);
        org.openide.awt.Mnemonics.setLocalizedText(lVersion, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lVersion.text")); // NOI18N

        txVersion.setColumns(20);

        lBootVersion.setLabelFor(txGroup);
        org.openide.awt.Mnemonics.setLocalizedText(lBootVersion, org.openide.util.NbBundle.getMessage(InitializrProjectPanelVisual1.class, "InitializrProjectPanelVisual1.lBootVersion.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lVersion)
                    .addComponent(lGroup)
                    .addComponent(lArtifact)
                    .addComponent(lName)
                    .addComponent(lDesc)
                    .addComponent(lPackage)
                    .addComponent(lPackaging)
                    .addComponent(lJavaVersion)
                    .addComponent(lLanguage)
                    .addComponent(lBootVersion))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txArtifact)
                    .addComponent(txName)
                    .addComponent(txDesc)
                    .addComponent(txPackage)
                    .addComponent(cbPackaging, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbJavaVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txVersion)
                    .addComponent(txGroup)
                    .addComponent(cbBootVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lBootVersion)
                    .addComponent(cbBootVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lGroup)
                    .addComponent(txGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lArtifact)
                    .addComponent(txArtifact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lVersion)
                    .addComponent(txVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lName)
                    .addComponent(txName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDesc)
                    .addComponent(txDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPackage)
                    .addComponent(txPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPackaging)
                    .addComponent(cbPackaging, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lJavaVersion)
                    .addComponent(cbJavaVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lLanguage)
                    .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbBootVersion;
    private javax.swing.JComboBox<String> cbJavaVersion;
    private javax.swing.JComboBox<String> cbLanguage;
    private javax.swing.JComboBox<String> cbPackaging;
    private javax.swing.JLabel lArtifact;
    private javax.swing.JLabel lBootVersion;
    private javax.swing.JLabel lDesc;
    private javax.swing.JLabel lGroup;
    private javax.swing.JLabel lJavaVersion;
    private javax.swing.JLabel lLanguage;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lPackage;
    private javax.swing.JLabel lPackaging;
    private javax.swing.JLabel lVersion;
    private javax.swing.JTextField txArtifact;
    private javax.swing.JTextField txDesc;
    private javax.swing.JTextField txGroup;
    private javax.swing.JTextField txName;
    private javax.swing.JTextField txPackage;
    private javax.swing.JTextField txVersion;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        txGroup.requestFocus();
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        return true;
    }

    void store(WizardDescriptor d) {
        d.putProperty(WIZ_GROUP, txGroup.getText().trim());
        d.putProperty(WIZ_ARTIFACT, txArtifact.getText().trim());
        d.putProperty(WIZ_VERSION, txVersion.getText().trim());
        d.putProperty(WIZ_NAME, txName.getText().trim());
        d.putProperty(WIZ_DESCRIPTION, txDesc.getText().trim());
        d.putProperty(WIZ_PACKAGE, txPackage.getText().trim());
        d.putProperty(WIZ_JAVA_VERSION, cbJavaVersion.getSelectedItem());
        d.putProperty(WIZ_PACKAGING, cbPackaging.getSelectedItem());
        d.putProperty(WIZ_LANGUAGE, cbLanguage.getSelectedItem());
    }

    void read(WizardDescriptor settings) {
        JsonNode meta = (JsonNode) settings.getProperty(WIZ_METADATA);
        if (meta != null) {
            this.txGroup.setText(meta.path("groupId").path("default").asText());
            this.txArtifact.setText(meta.path("artifactId").path("default").asText());
            this.txVersion.setText(meta.path("version").path("default").asText());
            this.txName.setText(meta.path("name").path("default").asText());
            this.txDesc.setText(meta.path("description").path("default").asText());
            this.txPackage.setText(meta.path("packageName").path("default").asText());
            fillCombo(meta.path("bootVersion"), dcbmBootVersion, cbBootVersion);
            fillCombo(meta.path("javaVersion"), dcbmJavaVersion, cbJavaVersion);
            fillCombo(meta.path("language"), dcbmLanguage, cbLanguage);
            fillCombo(meta.path("packaging"), dcbmPackaging, cbPackaging);
        }
    }

    private void fillCombo(JsonNode attrNode, DefaultComboBoxModel<CboxItem> comboModel, JComboBox combo) {
        JsonNode valArray = attrNode.path("values");
        comboModel.removeAllElements();
        for (JsonNode val : valArray) {
            comboModel.addElement(new CboxItem(val.get("id").asText(), val.get("name").asText()));
        }
        combo.setModel(comboModel);
        combo.setSelectedItem(attrNode.path("default").asText());
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    class CboxItem {

        private final String id;
        private final String description;

        public CboxItem(String id, String description) {
            this.id = id;
            this.description = description;
        }

        public String getId() {
            return id;
        }

        public String getDescription() {
            return description;
        }

        @Override
        public String toString() {
            return description;
        }

        @Override
        public int hashCode() {
            int hash = 3;
            hash = 23 * hash + Objects.hashCode(this.id);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final CboxItem other = (CboxItem) obj;
            return Objects.equals(this.id, other.id);
        }

    }
}
